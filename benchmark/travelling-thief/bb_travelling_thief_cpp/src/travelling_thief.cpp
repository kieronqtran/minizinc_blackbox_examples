#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <utility>

#include <assert.h>
#include <stddef.h>

#include <bb_travelling_thief/travelling_thief.h>

namespace traveling_thief {
    double cal_rental(
        int max_speed,
        int min_speed,
        int knapsack_capacity, 
        const std::vector<std::vector<int>>& city_distances, 
        const std::vector<int>& orders,
        const std::vector<int>& weights
    ) {
        double rental = 0;
        for (int i = 0; i < orders.size(); ++i) {
            double velocity = max_speed - weights[i] * (max_speed - min_speed) / knapsack_capacity;
            int current_city = orders[i] - 1;
            int next_city = (i == orders.size() - 1) ? 0 : orders[i + 1] - 1;
            rental += city_distances[current_city][next_city] / velocity;
        }
        return rental;
    }

    std::vector<std::vector<int>> get_distance_matrix(int n) {
        switch (n) {
            case 1:
                return {
                    {   0,  50, 547, 256, 390, 220, 738, 273, 389, 361 },
                    {  50,   0, 595, 255, 434, 266, 788, 253, 420, 337 },
                    { 547, 595,   0, 552, 416, 410, 222, 651, 326, 722 },
                    { 256, 255, 552,   0, 580, 410, 772, 103, 260, 172 },
                    { 390, 434, 416, 580,   0, 175, 500, 640, 528, 730 },
                    { 220, 266, 410, 410, 175,   0, 563, 465, 405, 556 },
                    { 738, 788, 222, 772, 500, 563,   0, 870, 547, 943 },
                    { 273, 253, 651, 103, 640, 465, 870,   0, 362,  91 },
                    { 389, 420, 326, 260, 528, 405, 547, 362,   0, 416 },
                    { 361, 337, 722, 172, 730, 556, 943,  91, 416,   0 }
                };
            case 2:
                return {
                    {   0,  477,  400,  502,  354,  667,  261,  361,  290,  768 },
                    { 477,    0,  679,   36,  499,  424,  233,  706,  606,  412 },
                    { 400,  679,    0,  714,  752,  594,  466,   94,  110,  757 },
                    { 502,   36,  714,    0,  501,  449,  264,  740,  640,  424 },
                    { 354,  499,  752,  501,    0,  862,  425,  714,  643,  900 },
                    { 667,  424,  594,  449,  862,    0,  446,  670,  591,  175 },
                    { 261,  233,  466,  264,  425,  446,    0,  481,  382,  519 },
                    { 361,  706,   94,  740,  714,  670,  481,    0,  100,  827 },
                    { 290,  606,  110,  640,  643,  591,  382,  100,    0,  742 },
                    { 768,  412,  757,  424,  900,  175,  519,  827,  742,    0 }
                };
            case 3:
                return {
                    {   0,  574,  781,  779,  484,  411,  711,   91,  804,  864,  583,  604,  447,  242,  546,  491,  600,  701,  433,  983},
                    { 574,    0,  779,  322,  270,  506,  581,  497,  457,  291,  240,  113,  148,  602,   92,   85,  345,  575,  149,  512},
                    { 781,  779,    0,  620,  962,  381,  216,  797,  470,  902,  546,  891,  806,  553,  848,  767, 1082,  218,  700,  695},
                    { 779,  322,  620,    0,  592,  519,  404,  725,  172,  291,  198,  418,  451,  704,  414,  381,  662,  403,  383,  206},
                    { 484,  270,  962,  592,    0,  619,  791,  393,  716,  506,  475,  202,  161,  618,  180,  221,  130,  782,  266,  781},
                    { 411,  506,  381,  519,  619,    0,  306,  418,  467,  728,  342,  602,  479,  219,  547,  462,  746,  296,  383,  690},
                    { 711,  581,  216,  404,  791,  306,    0,  703,  263,  687,  342,  694,  630,  522,  658,  581,  903,   10,  524,  497},
                    { 91,   497,  797,  725,  393,  418,  703,    0,  767,  787,  533,  519,  364,  290,  461,  412,  510,  693,  361,  930},
                    { 804,  457,  470,  172,  716,  467,  263,  767,    0,  461,  250,  564,  561,  678,  548,  495,  802,  265,  472,  238},
                    { 864,  291,  902,  291,  506,  728,  687,  787,  461,    0,  391,  304,  432,  867,  344,  375,  518,  684,  433,  367},
                    { 583,  240,  546,  198,  475,  342,  342,  533,  250,  391,    0,  354,  316,  510,  322,  255,  575,  336,  222,  400},
                    { 604,  113,  891,  418,  202,  602,  694,  519,  564,  304,  354,  0,    158,  671,   61,  141,  245,  688,  222,  591},
                    { 447,  148,  806,  451,  161,  479,  630,  364,  561,  432,  316,  158,    0,  520,   98,   71,  276,  622,  106,  649},
                    { 242,  602,  553,  704,  618,  219,  522,  290,  678,  867,  510,  671,  520,    0,  611,  533,  747,  512,  455,  891},
                    { 546,   92,  848,  414,  180,  547,  658,  461,  548,  344,  322,  61,    98,  611,    0,   85,  255,  651,  165,  600},
                    { 491,   85,  767,  381,  221,  462,  581,  412,  495,  375,  255,  141,   71,  533,   85,    0,  322,  574,   81,  579},
                    { 600,  345, 1082,  662,  130,  746,  903,  510,  802,  518,  575,  245,  276,  747,  255,  322,    0,  895,  382,  835},
                    { 701,  575,  218,  403,  782,  296,   10,  693,  265,  684,  336,  688,  622,  512,  651,  574,  895,    0,  516,  500},
                    { 433,  149,  700,  383,  266,  383,  524,  361,  472,  433,  222,  222,  106,  455,  165,   81,  382,  516,    0,  588},
                    { 983,  512,  695,  206,  781,  690,  497,  930,  238,  367,  400,  591,  649,  891,  600,  579,  835,  500,  588,    0},
                };
            case 4:
                return  {
                    {   0,  757,  211,  497,  439,  376,  344,  498,  279,  497,  127,  381,  472,  534,  150,  480,  453,  273,  247,  253 },
                    { 757,    0,  605,  313, 1196,  405,  787,  742,  935,  654,  771, 1071,  294,  401,  867,  551,  373,  641,  734,  538 },
                    { 211,  605,    0,  412,  623,  200,  485,  595,  483,  309,  308,  466,  311,  326,  270,  506,  258,  354,  150,   67 },
                    { 497,  313,  412,    0,  925,  262,  474,  441,  632,  605,  481,  857,  198,  411,  632,  255,  311,  331,  561,  350 },
                    { 439, 1196,  623,  925,    0,  810,  585,  763,  365,  826,  449,  313,  910,  944,  358,  838,  880,  631,  563,  680 },
                    { 376,  405,  200,  262,  810,    0,  539,  591,  610,  344,  430,  666,  112,  199,  467,  446,   91,  381,  332,  135 },
                    { 344,  787,  485,  474,  585,  539,    0,  180,  221,  794,  220,  682,  580,  738,  474,  283,  630,  160,  580,  483 },
                    { 498,  742,  595,  441,  763,  591,  180,    0,  398,  893,  383,  855,  598,  787,  639,  191,  675,  242,  713,  574 },
                    { 279,  935,  483,  632,  365,  610,  221,  398,    0,  776,  181,  510,  683,  792,  348,  491,  697,  305,  520,  510 },
                    { 497,  654,  309,  605,  826,  344,  794,  893,  776,    0,  611,  568,  422,  253,  480,  776,  306,  656,  270,  319 },
                    { 127,  771,  308,  481,  449,  430,  220,  383,  181,  611,    0,  474,  507,  611,  256,  400,  516,  187,  372,  330 },
                    { 381, 1071,  466,  857,  313,  666,  682,  855,  510,  568,  474,    0,  777,  743,  232,  861,  711,  650,  347,  533 },
                    { 472,  294,  311,  198,  910,  112,  580,  598,  683,  422,  507,  777,    0,  213,  574,  429,  117,  420,  444,  244 },
                    { 534,  401,  326,  411,  944,  199,  738,  787,  792,  253,  611,  743,  213,    0,  586,  632,  112,  580,  398,  283 },
                    { 150,  867,  270,  632,  358,  467,  474,  639,  348,  480,  256,  232,  574,  586,    0,  630,  528,  422,  211,  332 },
                    { 480,  551,  506,  255,  838,  446,  283,  191,  491,  776,  400,  861,  429,  632,  630,    0,  522,  214,  645,  466 },
                    { 453,  373,  258,  311,  880,   91,  630,  675,  697,  306,  516,  711,  117,  112,  528,  522,    0,  471,  366,  201 },
                    { 273,  641,  354,  331,  631,  381,  160,  242,  305,  656,  187,  650,  420,  580,  422,  214,  471,    0,  472,  338 },
                    { 247,  734,  150,  561,  563,  332,  580,  713,  520,  270,  372,  347,  444,  398,  211,  645,  366,  472,    0,  212 },
                    { 253,  538,   67,  350,  680,  135,  483,  574,  510,  319,  330,  533,  244,  283,  332,  466,  201,  338,  212,    0 },
                };
            case 5:
                return  {
                    {   0,  624,  262,  408,  776,  508, 1071,  394,  727, 1041,  876,  702,  209,  494,  792,  332,  765,  995,  659,  401 },
                    { 624,    0,  763,  358,  399,  384,  522,  262,  240,  470,  484,  443,  415,  422,  220,  812,  353,  420,   78,  244 },
                    { 262,  763,    0,  443,  782,  747, 1259,  590,  920, 1219,  870,  939,  394,  739,  880,   71,  788, 1170,  774,  519 },
                    { 408,  358,  443,    0,  369,  538,  879,  324,  570,  828,  468,  690,  262,  555,  439,  479,  361,  778,  347,  150 },
                    { 776,  399,  782,  369,    0,  758,  820,  573,  628,  753,  103,  842,  608,  790,  263,  801,   50,  709,  326,  419 },
                    { 508,  384,  747,  538,  758,    0,  614,  214,  300,  604,  853,  194,  364,   41,  602,  814,  718,  567,  461,  393 },
                    {1071,  522, 1259,  879,  820,  614,    0,  678,  344,   71,  861,  472,  875,  648,  557, 1315,  771,  112,  550,  753 },
                    { 394,  262,  590,  324,  573,  214,  678,    0,  334,  647,  673,  377,  198,  234,  471,  652,  539,  600,  323,  180 },
                    { 727,  240,  920,  570,  628,  300,  344,  334,    0,  318,  702,  248,  532,  340,  398,  978,  580,  275,  304,  429 },
                    {1041,  470, 1219,  828,  753,  604,   71,  647,  318,    0,  792,  481,  841,  641,  490, 1273,  704,   50,  492,  707 },
                    { 876,  484,  870,  468,  103,  853,  861,  673,  702,  792,    0,  926,  711,  886,  314,  884,  135,  750,  407,  522 },
                    { 702,  443,  939,  690,  842,  194,  472,  377,  248,  481,  926,    0,  552,  212,  636, 1006,  796,  455,  519,  540 },
                    { 209,  415,  394,  262,  608,  364,  875,  198,  532,  841,  711,  552,    0,  365,  590,  458,  589,  793,  453,  202 },
                    { 494,  422,  739,  555,  790,   41,  648,  234,  340,  641,  886,  212,  365,    0,  641,  808,  752,  605,  498,  414 },
                    { 792,  220,  880,  439,  263,  602,  557,  471,  398,  490,  314,  636,  590,  641,    0,  917,  214,  446,  149,  391 },
                    { 332,  812,   71,  479,  801,  814, 1315,  652,  978, 1273,  884, 1006,  458,  808,  917,    0,  810, 1224,  818,  569 },
                    { 765,  353,  788,  361,   50,  718,  771,  539,  580,  704,  135,  796,  589,  752,  214,  810,    0,  659,  279,  394 },
                    { 995,  420, 1170,  778,  709,  567,  112,  600,  275,   50,  750,  455,  793,  605,  446, 1224,  659,    0,  443,  658 },
                    { 659,   78,  774,  347,  326,  461,  550,  323,  304,  492,  407,  519,  453,  498,  149,  818,  279,  443,    0,  262 },
                    { 401,  244,  519,  150,  419,  393,  753,  180,  429,  707,  522,  540,  202,  414,  391,  569,  394,  658,  262,    0 },
                };
            default:
                throw std::invalid_argument("Invalid distance matrix number " + std::to_string(n));
        }
    }


}

extern "C" {

  void fzn_blackbox(const int* int_in, size_t int_in_len, const double *float_in,
                    size_t float_in_len, int *int_out, size_t int_out_len,
                    double *float_out, size_t float_out_len) {
    float renting_ratio = float_in[0];
    int max_speed = int_in[0];
    int min_speed = int_in[1];
    int knapsack_capacity = int_in[2];
    int distance_matrix = int_in[3];
    int order_len = int_in[4];
    int weights_len = int_in[5];
    int d = 6;
    std::vector<int> orders(int_in + d, int_in + d + order_len);
    std::vector<int> weights(int_in + d + order_len,
                             int_in + d + order_len + weights_len);

    std::vector<std::vector<int>> distances = traveling_thief::get_distance_matrix(distance_matrix);

    double rental = traveling_thief::cal_rental(max_speed, min_speed, knapsack_capacity, distances, orders, weights);

    float_out[0] = renting_ratio * rental;
  }
}
