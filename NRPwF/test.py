#%%
import numpy as np

input_data = [
  26, 26, 42,
  
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 5, 5, 8,
  
3, 0, 0, 0, 1, 2, 2, 2, 2, 0, 0, 2, 3, 0, 1, 0, 0, 1, 3, 0, 2, 2, 2, 2, 0, 0, 1, 2, 2, 0, 1, 1, 1, 2, 0, 3, 0, 0, 0, 1, 3, 0, 2, 3, 3, 3, 0, 0, 2, 3, 0, 1, 1, 0, 0, 2, 2, 2, 2, 0, 0, 2, 0, 1, 1, 0, 2, 0, 3, 0, 0, 2, 2, 0, 3, 3, 0, 1, 1, 0, 0, 3, 3, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 3, 0, 0, 0, 1, 1, 2, 2, 3, 0, 0, 1, 2, 0, 1, 2, 0, 0, 2, 2, 2, 3, 0, 1, 0, 1, 1, 0, 1, 2, 0, 1, 0, 0, 1, 3, 3, 0, 2, 0, 2, 2, 2, 0, 0, 0, 2, 0, 0, 1, 0, 1, 1, 2, 2, 2, 3, 0, 0, 1, 1, 3, 0, 1, 2, 0, 1, 0, 1, 1, 1, 0, 1, 0, 3, 0, 0, 2, 3, 0, 0, 1, 2, 3, 3, 3, 0, 1, 0, 0, 2, 0, 1, 0, 2, 3, 3, 3, 0, 0, 1, 1, 2, 0, 2, 2, 2, 0, 0, 1, 0, 0, 1, 0, 2, 3, 3, 0, 2, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 3, 3, 0, 1, 1, 0, 0, 1, 0, 0, 1, 3, 0, 0, 2, 2, 2, 0, 1, 2, 2, 0, 0, 2, 2, 3, 0, 0, 1, 0, 0, 1, 2, 3, 3, 3, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 2, 2, 2, 0, 0, 1, 3, 0, 2, 2, 0, 3, 0, 0, 0, 1, 0, 1, 1, 0, 3, 3, 3, 0, 1, 2, 0, 1, 0, 0, 0, 1, 0, 1, 1, 2, 0, 0, 1, 1, 0, 1, 1, 0, 2, 2, 0, 0, 0, 0, 1, 1, 3, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 3, 0, 2, 2, 0, 3, 0, 0, 0, 3, 3, 0, 1, 0, 0, 1, 1, 0, 0, 0, 2, 2, 2, 2, 3, 3, 0, 0, 3, 0, 1, 1, 0, 2, 2, 2, 2, 0, 1, 1, 0, 2, 2, 3, 0, 2, 2, 0, 0, 2, 2, 0, 2, 2, 2, 3, 0, 0, 0, 1, 2, 2, 2, 2, 0, 1, 0, 0, 1, 2, 0, 0, 3, 3, 0, 1, 2, 3, 0, 1, 0, 1, 2, 0, 0, 1, 1, 0, 0, 3, 3, 0, 1, 0, 2, 3, 3, 0, 0, 0, 1, 2, 2, 2, 0, 0, 1, 2, 2, 0, 0, 1, 2, 3, 0, 1, 2, 3, 0, 0, 1, 1, 0, 0, 1, 2, 0, 2, 3, 0, 1, 2, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 2, 0, 0, 1, 1, 3, 0, 1, 0, 1, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 3, 3, 0, 1, 1, 0, 1, 0, 3, 3, 0, 0, 3, 0, 1, 3, 0, 2, 0, 0, 2, 0, 1, 1, 2, 0, 0, 1, 1, 1, 2, 2, 2, 0, 3, 0, 0, 1, 3, 0, 2, 3, 0, 3, 3, 0, 2, 0, 0, 2, 2, 2, 0, 0, 2, 3, 3, 0, 1, 2, 2, 0, 0, 1, 0, 0, 0, 1, 0, 1, 2, 0, 2, 2, 2, 0, 0, 1, 1, 1, 2, 2, 0, 0, 3, 0, 0, 2, 0, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 0, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 1, 2, 0, 0, 0, 2, 0, 0, 1, 0, 1, 1, 1, 3, 0, 0, 2, 2, 0, 3, 0, 2, 2, 0, 0, 1, 1, 1, 0, 1, 3, 0, 0, 3, 3, 3, 0, 1, 3, 0, 0, 0, 2, 3, 0, 0, 3, 0, 2, 2, 0, 2, 0, 0, 1, 2, 2, 2, 3, 0, 1, 2, 0, 2, 2, 0, 0, 0, 2, 2, 2, 0, 3, 3, 0, 0, 1, 2, 2, 0, 1, 0, 0, 1, 3, 3, 0, 2, 2, 0, 0, 1, 1, 0, 1, 0, 1, 2, 3, 0, 2, 0, 0, 1, 2, 2, 0, 3, 3, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 2, 3, 0, 1, 3, 0, 0, 1, 3, 3, 0, 1, 1, 1, 2, 0, 2, 0, 0, 0, 1, 1, 1, 0, 2, 2, 0, 1, 0, 0, 1, 1, 0, 2, 2, 2, 2, 0, 0, 2, 2, 2, 0, 1, 3, 0, 0, 2, 2, 2, 3, 0, 1, 0, 0, 1, 1, 0, 3, 0, 0, 3, 3, 0, 0, 2, 2, 2, 3, 0, 0, 3, 0, 0, 1, 0, 1, 3, 3, 0, 0, 3, 0, 2, 2, 2, 0, 0, 1, 3, 0, 1, 1, 1, 2, 0, 0, 0, 2, 2, 2, 0, 2, 2, 0, 2, 2, 0, 2, 3, 0, 1, 0, 2, 0, 0, 2, 2, 3, 0, 2, 2, 2, 2, 0, 0, 2, 0, 1, 2, 3, 0, 0, 3, 0, 1, 2, 2, 0, 2, 0, 0, 1, 1, 3, 0, 0, 0, 2, 2, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 2, 2, 3, 3, 0, 0, 2, 2, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 2, 2, 0, 2, 2, 0, 0, 1, 2, 0, 1, 1, 3, 0, 1, 1, 0, 0, 0, 1, 3, 3, 0, 2, 0, 0, 3, 3, 3, 0, 2, 3, 0, 0, 1, 1, 2, 0, 2, 0, 0, 1, 3, 0, 2, 1, 0, 2, 2, 2, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 2, 2, 0, 0, 2, 2, 3, 0, 0, 1, 3, 0, 1, 1, 3, 0, 2, 0, 1, 0, 0, 0, 1, 0, 0, 1, 3, 0, 0, 2, 3, 3, 0, 2, 2, 2, 2, 0, 2, 0, 0, 0, 1, 0, 1, 0, 2, 2, 2, 3, 0, 0, 0, 1, 0, 1, 2, 3, 3, 0, 1, 2, 3, 0, 0, 0, 1, 2, 0, 2, 0, 1, 1, 1, 2, 2, 0, 0, 1, 1, 2, 2, 2, 2, 0, 2, 2, 3, 0, 0, 0, 0, 2, 2, 2, 0, 1, 3, 0, 1, 1, 2, 0, 0, 0, 0, 1, 1, 1, 0
  ]

nBioTypes, nNurses, nDays, *others = input_data
nNurseBioType = others[:nBioTypes]
nShift = np.array(others[nBioTypes:]).reshape(nNurses, nDays)

print(nBioTypes)
print(nNurses)
print(nDays)
print(nNurseBioType)
print(nShift)
# %%
import os
import matlab.engine
current_dir = os.path.dirname(os.path.abspath(__file__))
print("Current directory:", current_dir)
eng = matlab.engine.start_matlab()
eng.addpath(current_dir)

# %%
# temp = np.zeros((nNurses,))
# for n in range(0, nNurses):
#   _,Dv,_,_,_,_,_ = eng.evalnumberedpattern(
#       nShift[n].tolist(),
#       0,
#       9999,
#       9999,
#       9999,
#       9999,
#       9999,
#       0,
#       nNurseBioType[n],
#       nargout=7
#     )
#   Dv = np.array(Dv._data)*100
#   Dv = Dv[0:2400*nDays]
#   # Dv=Dv.reshape(-1,2400)
#   Dv=np.max(Dv,axis=1)
#   temp[n] = Dv[0]
# %%
from typing import *

def bb_fatigue_score(integers: List[int], floats: List[float]) -> Tuple[List[int], List[float]]:
  nBioTypes, nNurses, nDays, *others = integers
  nNurseBioType = others[:nBioTypes]
  nShift = np.array(others[nBioTypes:]).reshape(nNurses, nDays)
  temp = np.zeros((nNurses,))
  for n in range(0, nNurses):
    _,Dv,_,_,_,_,_ = eng.evalnumberedpattern(
        nShift[n].tolist(),
        0,
        9999,
        9999,
        9999,
        9999,
        9999,
        0,
        nNurseBioType[n],
        nargout=7
      )
    Dv = np.array(Dv._data)*100
    Dv = Dv[0:2400*nDays]
    # Dv=Dv.reshape(-1,2400)
    Dv=np.max(Dv,axis=1)
    temp[n] = Dv[0] 
  return ([int(temp.max())], [])

int_out, float_out = bb_fatigue_score(input_data, [])
# %%
from functools import cache
s = nShift[0].tolist()


_,Dv,_,_,_,_,_ = eng.evalnumberedpattern(
    tuple(s),

    0,
    9999,
    9999,
    9999,
    9999,
    9999,
    0,
    nNurseBioType[0],
    nargout=7
  )
# %%
Dv = np.array(Dv._data)*100
# %%
Dv = Dv[0:2400*nDays]
# %%
Dv.max()
# %%
Dv
